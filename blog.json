{"title":"plutonium.io's First Post: An Introduction","text":"Hey there, this is plutonium.io's first 'Hello World' to the internet in the form of a blog post.  \n\nWhat started out as some weekend fun playing around with SVG elements eventually turned into this simple website.  Here you'll find informative blog posts, stories of personal ventures, and recent updates about my projects.  \n\nWith my most recent project being this website, I'll quickly go over the nuts and bolts of how I put it together.\n\nThe hexagonal animation on the homepage uses [D3.js](http://d3js.org/).  D3.js is a great tool for svg manipulation, and is generally used for data visualization (D3 means 'Data Driven Documents').\n\nTo make the shapes, I coded a `Shape` object which has an array of Edge objects.  `Edge` objects each point to two vertices.  In order to make the actual geometric shape, the vertices of these `Edge` objects need to be placed.  To place the vertices, simple trigonometry is used.  Then the `Shape` object converts the array of vertices into a [path description format](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d).  A *path description format* is the string of text which goes into the *d* attribute of an SVG path element.\n\n```\n<svg width=\"20\" height=\"20\">\n  <path d=\"M0,0 L 0,20 L 20,20 L 20,0 L 0,0\"></path>\n</svg>\n```\nAs an example, the above path would correspond to a square.  That cryptic *path description text* really just means:\n```\nMove to (0, 0)\nFrom there draw a line to (0, 20)\nFrom there draw a line to (20, 20)\nFrom there draw a line to (20, 0)\nFrom there draw a line to (0, 0)\n```\n\nD3 is used to render these `Shape` objects, to animate them, and to handle all of the mouse events.\n\nFor the UI and the routing, [AngularJS](https://angularjs.org) and [Angular UI Router](https://github.com/angular-ui/ui-router) are used.  AngularJS is a library for creating 'front-end applications'.  I am using it to dynamically render templates in the browser.  This means that when you interact with any UI elements, such as the navigation bar links, the browser renders all transitions immediately and in real time, without fetching any templates from the server.\n\nOn the backend, I'm using StrongLoop's [LoopBack](http://loopback.io/).  LoopBack is a [node.js](https://nodejs.org/) framework built on top of [express.js](http://expressjs.com/).  So far it's been pretty straightforward to get up and running with LoopBack.  LoopBack comes with a model generator which creates models pre-baked with REST API hooks.\n\nLoopBack is only used for data persistence, with that data being the text that goes into this blog.\n\n### What to add?\nI've decided to deploy this website in its current state although it is lacking in some important features.  Namely, various web crawlers will likely have a difficult time indexing the content on this website, which will affect how well the website performs in search engines.\n\nThe simple thing to do is to pre-render the website (with [phantom.js](http://phantomjs.org/) for example).  Then when one of the web crawlers makes a request for the contents of the various endpoints, a pre-rendered template would be returned.  I would choose to pre-render the templates because the load time of the page adversely affects the search engine page rank, and keeping the request open while rendering the site with phantom.js might also have an effect.  That said, it would be more straightforward to render the page on each request made by the web crawler."}